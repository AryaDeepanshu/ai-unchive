import{AIProject,AIScreen,AIExtension,AIAsset}from"./ai_project.js";export class AIAReader{static async read(e){return new Promise(async(t,i)=>{AIProject.descriptorJSON=await DescriptorGenerator.generate();var n=new AIProject,s=e instanceof Blob?new zip.BlobReader(e):new zip.HttpReader(e);zip.createReader(s,e=>{e.getEntries(async e=>{e.length&&(n.addExtensions(await this.generateExtensions(e.filter(e=>"json"==this.getFileType(e)))),n.addScreens(await this.generateScreens(e.filter(e=>"scm"==this.getFileType(e)||"bky"==this.getFileType(e)),n)),n.addAssets(await this.generateAssets(e.filter(e=>"assets"==e.filename.split("/")[0]&&null==e.filename.split("/")[2]))),t(n))})})})}static async generateScreens(e,t){var i=[],n=[],s=[];for(let t of e){var a=await this.getFileContent(t);"scm"==this.getFileType(t)?i.push({name:this.getFileName(t),scm:a}):"bky"==this.getFileType(t)&&n.push({name:this.getFileName(t),bky:a})}for(let e of i){let i=new AIScreen;s.push(i.init(e.scm,n.find(t=>t.name==e.name).bky,e.name,t))}return Promise.all(s)}static async generateExtensions(e){var t=[],i=[],n=[];for(let n of e){var s=await this.getFileContent(n);"component_build_infos"==this.getFileName(n)||"component_build_info"==this.getFileName(n)?t.push({name:n.filename.split("/")[2],info:JSON.parse(s)}):"components"!=this.getFileName(n)&&"component"!=this.getFileName(n)||i.push({name:n.filename.split("/")[2],descriptor:JSON.parse(s)})}for(let e of t)if(Array.isArray(e.info))for(let t of e.info)n.push(new AIExtension(t.type,i.find(t=>t.name==e.name).descriptor[e.info.indexOf(t)]));else n.push(new AIExtension(e.info.type,i.find(t=>t.name==e.name).descriptor));return n}static async generateAssets(e){var t=[];for(let n of e){var i=await this.getFileContent(n,new zip.BlobWriter);t.push(new AIAsset(this.getFileName(n),this.getFileType(n),i))}return t}static getFileContent(e,t=new zip.TextWriter){return new Promise((i,n)=>{e.getData(t,e=>{i(e)})})}static getFileType(e){return e.filename.split(".").pop()}static getFileName(e){return e.filename.split("/").pop().split(".")[0]}}export class DescriptorGenerator{static generate(){return new Promise((e,t)=>{this.fetchJSON(t=>{e(JSON.parse(t))})})}static fetchJSON(e){var t=new XMLHttpRequest;t.overrideMimeType("application/json"),t.open("GET",fetchDir("unchive/simple_components.json"),!0),t.onreadystatechange=function(){4==t.readyState&&"200"==t.status&&e(t.responseText)},t.send(null)}}