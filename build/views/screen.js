import{View}from"./view.js";import{Image,Label,Button,Dropdown,DropdownItem,Dialog,Downloader,URLHandler}from"./widgets.js";import{ScreenNode,AdditionalListNode,ExtensionNode,AssetNode}from"./nodes/node.js";import{NodeList}from"./nodes/node_list.js";import{AIAReader,DescriptorGenerator}from"../unchive/aia_reader.js";import{AIProject}from"../unchive/ai_project.js";import{SummaryWriter}from"../unchive/summary_writer.js";export class Screen extends View{constructor(){super("DIV"),this.helpText=new Label("Upload a project using the button in the top-right"),this.titleBar=new TitleBar,this.addView(this.titleBar),this.nodeListContainer=new View("DIV"),this.nodeListContainer.addStyleName("node-list-container"),this.addView(this.nodeListContainer),this.initializeNodeLists()}async handleURLData(){this.req=URLHandler.getReqParams(),this.req.url&&(this.helpText.setText("Loading project..."),Opener.openURL(this.req.url)),"true"==this.req.embed&&(this.titleBar.setVisible(!1),this.addStyleName("embed"))}async openProject(e){null==AIProject.descriptorJSON&&(AIProject.descriptorJSON=await DescriptorGenerator.generate()),console.log(e),this.project=e,this.titleBar.exportButton.setVisible(!0),this.titleBar.title.setText(`${Messages.pageTitle} - ${e.name}.${this.aiv?"aiv":"aia"}`),this.initializeNodeLists();for(let t of e.screens)this.primaryNodeList.addNodeAsync(ScreenNode.promiseNode(t));this.primaryNodeList.addNodeAsync(AdditionalListNode.promiseNode("Extensions",e.extensions,function(e){for(let t of e)this.chainNodeList.addNode(new ExtensionNode(t.descriptorJSON.name,t.name,t.descriptorJSON.helpString))})),this.primaryNodeList.addNodeAsync(AdditionalListNode.promiseNode("Assets",e.assets,function(e){for(let t of e)this.chainNodeList.addNode(new AssetNode(t.name,t.type,t.size,RootPanel.aiv?"unknown.unknown":t.getURL()))})),this.primaryNodeList.addNodeAsync(AdditionalListNode.promiseNode("Summary",null,null,function(){this.loaded||(this.loaded=!0,SummaryWriter.generateSummmaryNodesForProject(e,this.chainNodeList))})),this.helpText.setText("Click on a Screen to view its details")}initializeNodeLists(){this.primaryNodeList=new NodeList,this.primaryNodeList.addStyleName("node-list--primary"),this.nodeLists=[this.primaryNodeList],this.nodeListContainer.clear(),this.nodeListContainer.addView(this.primaryNodeList),this.helpPanel=new View("DIV"),this.helpPanel.addView(this.helpText),this.helpPanel.addStyleName("help-panel"),this.nodeListContainer.addView(this.helpPanel)}}class TitleBar extends View{constructor(){super("DIV"),this.setStyleName("title-bar"),this.logo=new Image("logo.png"),this.logo.addStyleName("title-bar__logo"),this.logo.setSource("./../logo.png"),this.title=new Label(Messages.pageTitle),this.title.addStyleName("title-bar__title"),this.uploadButton=new Button("unarchive",!0),this.uploadButton.addStyleName("title-bar__upload-button");var e=new View("INPUT");e.domElement.type="file",e.domElement.accept=".aia,.aiv",e.domElement.addEventListener("change",async t=>{await Opener.openFile(e.domElement.value,t.target.files[0])}),this.uploadButton.addClickListener(t=>{e.domElement.click()}),this.addView(this.logo),this.addView(this.title),this.addView(this.uploadButton),this.exportButton=new Button("cloud_download",!0),this.exportButton.addStyleName("title-bar__export-button"),this.exportButton.addClickListener(e=>{console.log(Flatted.stringify(RootPanel.project)),Downloader.downloadURL("data:application/json;charset=utf-8,"+encodeURIComponent(Flatted.stringify(RootPanel.project)),`${RootPanel.project.name}.aiv`)}),this.exportButton.setVisible(!1),this.addView(this.exportButton),this.localeDropdown=new Dropdown("",e=>{window.location="?locale="+window.locales.find(e=>e[0]==this.localeDropdown.getValue())[1]});for(let e of window.locales)this.localeDropdown.addDropdownItem(new DropdownItem(e[0]));this.localeDropdown.setValue(window.locale[0]),this.localeDropdown.addStyleName("title-bar__locale-dropdown"),this.addView(this.localeDropdown)}}class Opener{static async openFile(e,t){let i,o=(e=e.split(".")).pop(),a=e.pop().split("\\").pop();if("aiv"==o)i=await this.openAiv(URL.createObjectURL(t));else{if("aia"!=o)return void new Dialog(`Unknown project type .${o}`,"Project files should end with .aia or .aiv").open();i=await AIAReader.read(t)}i.name=a,RootPanel.openProject(i)}static async openURL(e){let t,i=e.split(".").pop(),o=e.split(".")[0].split("\\").pop();if(console.log(e),"aia"==i)t=await AIAReader.read(e);else{if("aiv"!=i)return void new Dialog(`Unknown project type .${i}`,"Project files should end with .aia or .aiv").open();t=await this.openAiv(e)}t.name=o,RootPanel.openProject(t)}static async openAiv(e){RootPanel.aiv=!0;let t=await fetch(e);return Flatted.parse(JSON.stringify(await t.json()))}}