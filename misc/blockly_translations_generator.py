import os, sys
name = 'prop_name'
bname = 'blockly_name'
map = [
{name: 'when_', bname: 'LANG_COMPONENT_BLOCK_TITLE_WHEN'},
{name: 'whenAny_', bname: 'LANG_COMPONENT_BLOCK_GENERIC_EVENT_TITLE'},
{name: 'do_', bname: 'LANG_CONTROLS_WHILEUNTIL_INPUT_DO'},
{name: 'if_', bname: 'LANG_CONTROLS_IF_MSG_IF'},
{name: 'else_', bname: 'LANG_CONTROLS_IF_MSG_ELSE'},
{name: 'elseIf_', bname: 'LANG_CONTROLS_IF_MSG_ELSEIF'},
{name: 'then_', bname: 'LANG_CONTROLS_IF_MSG_THEN'},
{name: 'call_', bname: 'LANG_COMPONENT_BLOCK_METHOD_TITLE_CALL'},
{name: 'forComponent_', bname: 'LANG_COMPONENT_BLOCK_GENERIC_METHOD_TITLE_FOR_COMPONENT'},
{name: 'set_', bname: 'LANG_COMPONENT_BLOCK_SETTER_TITLE_SET'},
{name: 'to_', bname: 'LANG_COMPONENT_BLOCK_SETTER_TITLE_TO'},
{name: 'ofComponent_', bname: 'LANG_COMPONENT_BLOCK_GENERIC_GETTER_TITLE_OF_COMPONENT'},
{name: 'years_', bname: 'TIME_YEARS'},
{name: 'months_', bname: 'TIME_MONTHS'},
{name: 'weeks_', bname: 'TIME_WEEKS'},
{name: 'days_', bname: 'TIME_DAYS'},
{name: 'hours_', bname: 'TIME_HOURS'},
{name: 'minutes_', bname: 'TIME_MINUTES'},
{name: 'seconds_', bname: 'TIME_SECONDS'},
{name: 'duration_', bname: 'TIME_DURATION'},
{name: 'forEach_', bname: 'LANG_CONTROLS_FORRANGE_INPUT_ITEM'},
{name: 'from_', bname: 'LANG_CONTROLS_FORRANGE_INPUT_START'},
{name: 'to__', bname: 'LANG_CONTROLS_FORRANGE_INPUT_END'},
{name: 'by_', bname: 'LANG_CONTROLS_FORRANGE_INPUT_STEP'},
{name: 'inList_', bname: 'LANG_CONTROLS_FOREACH_INPUT_INLIST'},
{name: 'while_', bname: 'LANG_CONTROLS_WHILE_TITLE'},
{name: 'test_', bname: 'LANG_CONTROLS_WHILE_INPUT_TEST'},
{name: 'if__', bname: 'LANG_CONTROLS_CHOOSE_COLLAPSED_TEXT'},
{name: 'result_', bname: 'LANG_CONTROLS_DO_THEN_RETURN_INPUT_RETURN'},
{name: 'evaluateButIgnore_', bname: 'LANG_CONTROLS_EVAL_BUT_IGNORE_TITLE'},
{name: 'openAnotherScreen_', bname: 'LANG_CONTROLS_OPEN_ANOTHER_SCREEN_TITLE'},
{name: 'screenName_', bname: 'LANG_CONTROLS_OPEN_ANOTHER_SCREEN_INPUT_SCREENNAME'},
{name: 'oASWStartVal_', bname: 'LANG_CONTROLS_OPEN_ANOTHER_SCREEN_WITH_START_VALUE_TITLE'},
{name: 'startValue_', bname: 'LANG_CONTROLS_GET_START_VALUE_INPUT_STARTVALUE'},
{name: 'getSV_', bname: 'LANG_CONTROLS_GET_START_VALUE_TITLE'},
{name: 'closeScreen_', bname: 'LANG_CONTROLS_CLOSE_SCREEN_COLLAPSED_TEXT'},
{name: 'cSWValue_', bname: 'LANG_CONTROLS_CLOSE_SCREEN_WITH_VALUE_TITLE'},
{name: 'closeApp_', bname: 'LANG_CONTROLS_CLOSE_APPLICATION_TITLE'},
{name: 'getPlainST_', bname: 'LANG_CONTROLS_GET_PLAIN_START_TEXT_TITLE'},
{name: 'cSWPText_', bname: 'LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_TITLE'},
{name: 'text_', bname: 'LANG_CONTROLS_CLOSE_SCREEN_WITH_PLAIN_TEXT_INPUT_TEXT'},
{name: 'break_', bname: 'LANG_CONTROLS_BREAK_TITLE'},
{name: 'true_', bname: 'LANG_LOGIC_BOOLEAN_TRUE'},
{name: 'false_', bname: 'LANG_LOGIC_BOOLEAN_FALSE'},
{name: 'not_', bname: 'LANG_LOGIC_NEGATE_INPUT_NOT'},
{name: 'eq_', bname: 'LANG_MATH_COMPARE_EQ'},
{name: 'neq_', bname: 'LANG_MATH_COMPARE_NEQ'},
{name: 'and_', bname: 'LANG_LOGIC_OPERATION_AND'},
{name: 'or_', bname: 'LANG_LOGIC_OPERATION_OR'},
{name: 'lt_', bname: 'LANG_MATH_COMPARE_LT'},
{name: 'lte_', bname: 'LANG_MATH_COMPARE_LTE'},
{name: 'gt_', bname: 'LANG_MATH_COMPARE_GT'},
{name: 'gte_', bname: 'LANG_MATH_COMPARE_GTE'},
{name: 'add_', bname: 'LANG_MATH_ARITHMETIC_ADD'},
{name: 'sub_', bname: 'LANG_MATH_ARITHMETIC_MINUS'},
{name: 'mul_', bname: 'LANG_MATH_ARITHMETIC_MULTIPLY'},
{name: 'div_', bname: 'LANG_MATH_ARITHMETIC_DIVIDE'},
{name: 'pow_', bname: 'LANG_MATH_ARITHMETIC_POWER'},
{name: 'bAnd_', bname: 'LANG_MATH_BITWISE_AND'},
{name: 'bOr_', bname: 'LANG_MATH_BITWISE_IOR'},
{name: 'bXor_', bname: 'LANG_MATH_BITWISE_XOR'},
{name: 'randomInt_', bname: 'LANG_MATH_RANDOM_INT_TITLE_RANDOM'},
{name: 'randomFrac_', bname: 'LANG_MATH_RANDOM_FLOAT_TITLE_RANDOM'},
{name: 'randomSetSeed_', bname: 'LANG_MATH_RANDOM_SEED_TITLE_RANDOM'},
{name: 'min_', bname: 'LANG_MATH_ONLIST_OPERATOR_MIN'},
{name: 'max_', bname: 'LANG_MATH_ONLIST_OPERATOR_MAX'},
{name: 'sqRoot_', bname: 'LANG_MATH_SINGLE_OP_ROOT'},
{name: 'abs_', bname: 'LANG_MATH_SINGLE_OP_ABSOLUTE'},
{name: 'neg_', bname: 'LANG_MATH_SINGLE_OP_NEG'},
{name: 'log_', bname: 'LANG_MATH_SINGLE_OP_LN'},
{name: 'exp_', bname: 'LANG_MATH_SINGLE_OP_EXP'},
{name: 'round_', bname: 'LANG_MATH_ROUND_OPERATOR_ROUND'},
{name: 'ceil_', bname: 'LANG_MATH_ROUND_OPERATOR_CEILING'},
{name: 'floor_', bname: 'LANG_MATH_ROUND_OPERATOR_FLOOR'},
{name: 'sin_', bname: 'LANG_MATH_TRIG_SIN'},
{name: 'cos_', bname: 'LANG_MATH_TRIG_COS'},
{name: 'tan_', bname: 'LANG_MATH_TRIG_TAN'},
{name: 'asin_', bname: 'LANG_MATH_TRIG_ASIN'},
{name: 'acos_', bname: 'LANG_MATH_TRIG_ACOS'},
{name: 'atan_', bname: 'LANG_MATH_TRIG_ATAN'},
{name: 'atan2_', bname: 'LANG_MATH_TRIG_ATAN2'},
{name: 'x_', bname: 'LANG_MATH_TRIG_ATAN2_X'},
{name: 'y_', bname: 'LANG_MATH_TRIG_ATAN2_Y'},
{name: 'moduloOf_', bname: 'LANG_MATH_DIVIDE_OPERATOR_MODULO'},
{name: 'remainderOf_', bname: 'LANG_MATH_DIVIDE_OPERATOR_REMAINDER'},
{name: 'quotientOf_', bname: 'LANG_MATH_DIVIDE_OPERATOR_QUOTIENT'},
{name: 'convert_', bname: 'LANG_MATH_CONVERT_ANGLES_TITLE_CONVERT'},
{name: 'radToDeg_', bname: 'LANG_MATH_CONVERT_ANGLES_OP_RAD_TO_DEG'},
{name: 'degToRad_', bname: 'LANG_MATH_CONVERT_ANGLES_OP_DEG_TO_RAD'},
{name: 'formatAsDec_', bname: 'LANG_MATH_FORMAT_AS_DECIMAL_TITLE'},
{name: 'number_', bname: 'LANG_MATH_FORMAT_AS_DECIMAL_INPUT_NUM'},
{name: 'places_', bname: 'LANG_MATH_FORMAT_AS_DECIMAL_INPUT_PLACES'},
{name: 'isNum_', bname: 'LANG_MATH_IS_A_NUMBER_INPUT_NUM'},
{name: 'isBs10_', bname: 'LANG_MATH_IS_A_DECIMAL_INPUT_NUM'},
{name: 'isHex_', bname: 'LANG_MATH_IS_A_HEXADECIMAL_INPUT_NUM'},
{name: 'isBin_', bname: 'LANG_MATH_IS_A_BINARY_INPUT_NUM'},
{name: 'convertNum_', bname: 'LANG_MATH_CONVERT_NUMBER_TITLE_CONVERT'},
{name: 'b10THex_', bname: 'LANG_MATH_CONVERT_NUMBER_OP_DEC_TO_HEX'},
{name: 'hexTB10_', bname: 'LANG_MATH_CONVERT_NUMBER_OP_HEX_TO_DEC'},
{name: 'b10TBin_', bname: 'LANG_MATH_CONVERT_NUMBER_OP_DEC_TO_BIN'},
{name: 'binTB10_', bname: 'LANG_MATH_CONVERT_NUMBER_OP_BIN_TO_DEC'},
{name: 'lQuote_', bname: 'LANG_TEXT_TEXT_LEFT_QUOTE'},
{name: 'rQuote_', bname: 'LANG_TEXT_TEXT_RIGHT_QUOTE'},
{name: 'join_', bname: 'LANG_TEXT_JOIN_TITLE_JOIN'},
{name: 'string_', bname: 'LANG_TEXT_JOIN_ITEM_TITLE_ITEM'},
{name: 'length_', bname: 'LANG_TEXT_LENGTH_INPUT_LENGTH'},
{name: 'isEmpty_', bname: 'LANG_TEXT_ISEMPTY_INPUT_ISEMPTY'},
{name: 'compareTxts_', bname: 'LANG_TEXT_COMPARE_INPUT_COMPARE'},
{name: 'lt__', bname: 'LANG_TEXT_COMPARE_LT'},
{name: 'eq__', bname: 'LANG_TEXT_COMPARE_EQUAL'},
{name: 'gt__', bname: 'LANG_TEXT_COMPARE_GT'},
{name: 'trim_', bname: 'LANG_TEXT_TRIM_TITLE_TRIM'},
{name: 'upcase_', bname: 'LANG_TEXT_CHANGECASE_OPERATOR_UPPERCASE'},
{name: 'downcase_', bname: 'LANG_TEXT_CHANGECASE_OPERATOR_DOWNCASE'},
{name: 'at_', bname: 'LANG_TEXT_SPLIT_INPUT_AT'},
{name: 'atList_', bname: 'LANG_TEXT_SPLIT_INPUT_AT_LIST'},
{name: 'spAtFirst_', bname: 'LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_FIRST'},
{name: 'sp_', bname: 'LANG_TEXT_SPLIT_OPERATOR_SPLIT'},
{name: 'spAtFoAny_', bname: 'LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_FIRST_OF_ANY'},
{name: 'spAtAny_', bname: 'LANG_TEXT_SPLIT_OPERATOR_SPLIT_AT_ANY'},
{name: 'spAtSpc_', bname: 'LANG_TEXT_SPLIT_AT_SPACES_TITLE'},
{name: 'obfsText_', bname: 'LANG_TEXT_TEXT_OBFUSCATE'},
{name: 'makeColor_', bname: 'LANG_COLOUR_MAKE_COLOUR'},
{name: 'splitColor_', bname: 'LANG_COLOUR_SPLIT_COLOUR'},
{name: 'initGbl_', bname: 'LANG_VARIABLES_GLOBAL_DECLARATION_TITLE_INIT'},
{name: 'get_', bname: 'LANG_VARIABLES_GET_TITLE_GET'},
{name: 'initLcl_', bname: 'LANG_VARIABLES_LOCAL_DECLARATION_TITLE_INIT'},
{name: 'in_', bname: 'LANG_VARIABLES_LOCAL_DECLARATION_IN_DO'},
{name: 'crEmptyList_', bname: 'LANG_LISTS_CREATE_EMPTY_TITLE'},
{name: 'mkAList_', bname: 'LANG_LISTS_CREATE_WITH_TITLE_MAKE_LIST'},
{name: 'adItsTList_', bname: 'LANG_LISTS_ADD_ITEMS_TITLE_ADD'},
{name: 'list_', bname: 'LANG_LISTS_LENGTH_INPUT_LIST'},
{name: 'lenOList_', bname: 'LANG_LISTS_LENGTH_INPUT_LENGTH'},
{name: 'isLEmpty_', bname: 'LANG_LISTS_TITLE_IS_EMPTY'},
{name: 'pARanItem_', bname: 'LANG_LISTS_PICK_RANDOM_TITLE_PICK_RANDOM'},
{name: 'cpyList_', bname: 'LANG_LISTS_COPY_TITLE_COPY'},
{name: 'iAList_', bname: 'LANG_LISTS_IS_LIST_TITLE_IS_LIST'},
{name: 'thing_', bname: 'LANG_LISTS_IS_LIST_INPUT_THING'},
{name: 'revList_', bname: 'LANG_LISTS_REVERSE_TITLE_REVERSE'},
{name: 'lTCRow_', bname: 'LANG_LISTS_TO_CSV_ROW_TITLE_TO_CSV'},
{name: 'lTCTab_', bname: 'LANG_LISTS_TO_CSV_TABLE_TITLE_TO_CSV'},
{name: 'lFCRow_', bname: 'LANG_LISTS_FROM_CSV_ROW_TITLE_FROM_CSV'},
{name: 'lFCTab_', bname: 'LANG_LISTS_FROM_CSV_TABLE_TITLE_FROM_CSV'},
{name: 'item_', bname: 'LANG_LISTS_ADD_ITEM_TITLE'},
{name: 'iInList_', bname: 'LANG_LISTS_IS_IN_TITLE_IS_IN'},
{name: 'idxInList_', bname: 'LANG_LISTS_POSITION_IN_TITLE_POSITION'},
{name: 'selLiItem_', bname: 'LANG_LISTS_SELECT_ITEM_TITLE_SELECT'},
{name: 'index_', bname: 'LANG_LISTS_INSERT_INPUT_INDEX'},
{name: 'insLiItem_', bname: 'LANG_LISTS_INSERT_TITLE_INSERT_LIST'},
{name: 'repLiItem_', bname: 'LANG_LISTS_REPLACE_ITEM_TITLE_REPLACE'},
{name: 'repl_', bname: 'LANG_TEXT_REPLACE_ALL_INPUT_REPLACEMENT'},
{name: 'remLiItem_', bname: 'LANG_LISTS_REMOVE_ITEM_TITLE_REMOVE'},
{name: 'appToList_', bname: 'LANG_LISTS_APPEND_LIST_TITLE_APPEND'},
{name: 'l1_', bname: 'LANG_LISTS_APPEND_LIST_INPUT_LIST1'},
{name: 'l2_', bname: 'LANG_LISTS_APPEND_LIST_INPUT_LIST2'},
{name: 'lkIPrs_', bname: 'LANG_LISTS_LOOKUP_IN_PAIRS_TITLE_LOOKUP_IN_PAIRS'},
{name: 'pairs_', bname: 'LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_PAIRS'},
{name: 'key_', bname: 'LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_KEY'},
{name: 'ntFnd_', bname: 'LANG_LISTS_LOOKUP_IN_PAIRS_INPUT_NOT_FOUND'},
{name: 'joiIts_', bname: 'LANG_LISTS_JOIN_WITH_SEPARATOR_INPUT'},
{name: 'mkADct_', bname: 'LANG_DICTIONARIES_MAKE_DICTIONARY_TITLE'},
{name: 'crEmptyDct_', bname: 'LANG_DICTIONARIES_CREATE_EMPTY_TITLE'},
{name: 'pair_', bname: 'LANG_DICTIONARIES_PAIR_TITLE'},
{name: 'value_', bname: 'LANG_CONTROLS_FOREACH_DICT_INPUT_VALUE'},
{name: 'keys_', bname: 'LANG_DICTIONARIES_GET_KEYS_TITLE'},
{name: 'values_', bname: 'LANG_DICTIONARIES_GET_VALUES_TITLE'},
{name: 'isKInDct_', bname: 'LANG_DICTIONARIES_IS_KEY_IN_TITLE'},
{name: 'dict_', bname: 'LANG_DICTIONARIES_GET_VALUES_INPUT'},
{name: 'szOfDct_', bname: 'LANG_DICTIONARIES_LENGTH_TITLE'},
{name: 'lstOPrsTDct_', bname: 'LANG_DICTIONARIES_ALIST_TO_DICT_TITLE'},
{name: 'dctTLstOPrs_', bname: 'LANG_DICTIONARIES_DICT_TO_ALIST_TITLE'},
{name: 'copyDct_', bname: 'LANG_DICTIONARIES_COPY_TITLE'},
{name: 'mergeInto_', bname: 'LANG_DICTIONARIES_COMBINE_DICTS_TITLE'},
{name: 'lstByWkngKPth_', bname: 'LANG_DICTIONARIES_WALK_TREE_TITLE'},
{name: 'wlkAtAllLvl_', bname: 'LANG_DICTIONARIES_WALK_TREE_ALL_TITLE'},
{name: 'isADct_', bname: 'LANG_DICTIONARIES_IS_DICT_TITLE'}
]

trans_files = []
current_dir = os.path.dirname( __file__ )

for (dirpath, dirnames, filenames) in os.walk(os.path.abspath(os.path.join(current_dir))):
    for dirname in dirnames:
        for (dirpath2, dirnames2, filenames2) in os.walk(dirname):
            trans_files.append([dirname, filenames2[0]])
    break

for file in trans_files:
    f = open(file[0] + '_1.properties', 'w', encoding='utf-8')
    rf = open(os.path.join(file[0], file[1]), 'r', encoding='utf-8')
    content = rf.read().split('\n')
    for trans in map:
        for line in content:
            nvp = line.strip().split('=', 1)
            if nvp[0].strip() == ('Blockly.Msg.' + trans[bname]):
                f.write(trans[name] + '=' + nvp[1].strip()[:-1] + '\n')
                continue

#print(trans_files)
